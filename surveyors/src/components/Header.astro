---
const navItems = [
  { name: 'What we do', href: '/services', hasDropdown: true },
  { name: 'Why HR Surveyors', href: '/about' },
  { name: 'Our locations', href: '/locations' },
  { name: 'Contact', href: '/contact' },
];
---

<header id="main-header" class="fixed top-0 left-0 right-0 z-50 mx-10 mt-10 bg-hr-dark bg-opacity-20 backdrop-blur-md rounded transition-all duration-300">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <a href="/" class="text-2xl font-bold text-white flex items-center space-x-2">
      <span class="text-hr-accent">⚡</span>
      <span><span class="text-hr-accent">HR</span>SURVEYORS</span>
    </a>
    <nav class="hidden md:flex items-center space-x-6">
      {navItems.map((item) => (
        <a href={item.href} class="text-white hover:text-hr-accent transition-colors" data-nav-link>
          {item.name}
          {item.hasDropdown && <span class="ml-1">▼</span>}
        </a>
      ))}
      <a href="/contact" class="bg-hr-accent text-hr-dark px-4 py-2 rounded font-semibold hover:bg-opacity-90 transition-colors">
        Get in touch
      </a>
    </nav>
    <button class="md:hidden text-white p-2" id="mobile-menu-toggle" aria-label="Toggle mobile menu">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </div>
</header>

<!-- Mobile menu (hidden by default) -->
<div class="fixed inset-0 bg-hr-dark bg-opacity-90 z-40 transform transition-transform duration-300 translate-x-full" id="mobile-menu">
  <div class="flex flex-col h-full justify-center items-center space-y-8">
    <button class="absolute top-4 right-4 text-white" id="close-mobile-menu" aria-label="Close mobile menu">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    {navItems.map((item) => (
      <a href={item.href} class="text-white text-2xl hover:text-hr-accent transition-colors">
        {item.name}
      </a>
    ))}
    <a href="/contact" class="bg-hr-accent text-hr-dark px-6 py-3 rounded-full font-semibold hover:bg-opacity-90 transition-colors">
      Get in touch
    </a>
  </div>
</div>

<script>
  const header = document.getElementById('main-header');
  const navLinks = document.querySelectorAll('[data-nav-link]');
  const logo = document.querySelector('#main-header a.text-2xl');
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const closeMobileMenu = document.getElementById('close-mobile-menu');
  const mobileMenu = document.getElementById('mobile-menu');
  const burgerIcon = mobileMenuToggle?.querySelector('svg');

  let lastScrollY = window.scrollY;
  const scrollThreshold = 300;

  window.addEventListener('scroll', () => {
    if (!header || !logo || !burgerIcon) return;

    const currentScrollY = window.scrollY;

    if (currentScrollY > lastScrollY && currentScrollY > scrollThreshold) {
      header.classList.add('translate-y-[-150%]');
    } else {
      header.classList.remove('translate-y-[-150%]');
      if (currentScrollY > 50) {
        header.classList.add('bg-white');
        header.classList.remove('bg-hr-dark', 'bg-opacity-20', 'backdrop-blur-md');
        
        navLinks.forEach(link => {
          if (link instanceof HTMLElement) {
            link.classList.remove('text-white');
            link.classList.add('text-black');
          }
        });
        logo.classList.remove('text-white');
        logo.classList.add('text-black');
        burgerIcon.classList.remove('text-white');
        burgerIcon.classList.add('text-black');
      } else {
        header.classList.remove('bg-white');
        header.classList.add('bg-hr-dark', 'bg-opacity-20', 'backdrop-blur-md');
        
        navLinks.forEach(link => {
          if (link instanceof HTMLElement) {
            link.classList.add('text-white');
            link.classList.remove('text-black');
          }
        });
        logo.classList.add('text-white');
        logo.classList.remove('text-black');
        burgerIcon.classList.add('text-white');
        burgerIcon.classList.remove('text-black');
      }
    }

    lastScrollY = currentScrollY;
  });

  if (mobileMenuToggle && closeMobileMenu && mobileMenu) {
    mobileMenuToggle.addEventListener('click', () => {
      mobileMenu.classList.remove('translate-x-full');
    });

    closeMobileMenu.addEventListener('click', () => {
      mobileMenu.classList.add('translate-x-full');
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (event) => {
      if (event.target instanceof Node && 
          mobileMenu && 
          mobileMenuToggle && 
          !mobileMenu.contains(event.target) && 
          !mobileMenuToggle.contains(event.target)) {
        mobileMenu.classList.add('translate-x-full');
      }
    });
  }
</script>