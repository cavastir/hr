---
const navItems = [
  { name: 'Our Services', href: '/services', hasDropdown: true },
  { name: 'Our Story', href: '/about' },
  { name: 'Our Locations', href: '/locations' },
  { name: 'Careers', href: '/careers' },  // Changed from 'Contact' to 'Careers'
];

const serviceItems = [
  { name: 'Land Surveying', href: '/services/land-surveying' },
  { name: 'Engineering Surveys', href: '/services/engineering-surveys' },
  { name: 'Construction Surveys', href: '/services/construction-surveys' },
  { name: 'Aerial Mapping', href: '/services/aerial-mapping' },
  { name: 'Hydrographic Surveys', href: '/services/hydrographic-surveys' },
  { name: 'GIS Services', href: '/services/gis-services' },
];
---

<header id="main-header" class="fixed top-0 left-0 right-0 z-50 bg-hr-dark bg-opacity-30 backdrop-blur-md transition-all duration-300">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <a href="/" class="flex items-center space-x-2 relative w-48 h-12"> 
      <img 
        src="/images/hr-surveyors-logo-dark.png" 
        alt="HR Surveyors Logo" 
        class="w-full h-full object-contain logo"
        loading="lazy"
      />
    </a>
    <nav class="hidden md:flex items-center space-x-6">
      {navItems.map((item) => (
        <a href={item.href} class="text-white hover:text-hr-accent transition-colors relative group" data-nav-link>
          {item.name}
          <span class="absolute left-0 right-0 bottom-0 h-0.5 bg-hr-accent transform scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></span>
        </a>
      ))}
      <a href="/contact" class="bg-hr-accent text-hr-dark px-4 py-2 rounded font-semibold hover:bg-opacity-90 transition-colors relative overflow-hidden group">
        <span class="relative z-10 group-hover:text-white transition-colors">Get in touch</span>
        <span class="absolute inset-0 bg-hr-dark transform scale-x-0 group-hover:scale-x-100 transition-transform origin-left"></span>
      </a>
    </nav>
    <button class="md:hidden text-white p-2 focus:outline-none" id="mobile-menu-toggle" aria-label="Toggle mobile menu">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </div>
</header>

<!-- Mobile menu (hidden by default) -->
<div class="fixed inset-0 bg-white z-50 transform transition-transform duration-300 translate-x-full" id="mobile-menu">
  <div class="flex flex-col h-full w-full">
    <div class="bg-gray-100 p-4 flex justify-between items-center">
      <a href="/" class="flex items-center space-x-2">
        <img 
          src="/images/hr-surveyors-logo-light.png" 
          alt="HR Surveyors Logo" 
          class="h-10 w-auto"
        />
      </a>
      <button class="text-hr-dark" id="close-mobile-menu" aria-label="Close mobile menu">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div class="overflow-y-auto flex-grow">
      {navItems.map((item) => (
        <div class="border-b border-gray-200">
          <button 
            class="w-full text-left text-hr-dark text-lg hover:text-hr-accent transition-colors py-4 px-4 flex justify-between items-center"
            data-dropdown-toggle={item.hasDropdown ? item.name : null}
          >
            {item.name}
            {item.hasDropdown && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            )}
          </button>
          {item.hasDropdown && (
            <div class="hidden pl-4" id={`dropdown-${item.name}`}>
              {serviceItems.map((service) => (
                <a href={service.href} class="block text-hr-dark text-lg hover:text-hr-accent transition-colors py-2">
                  {service.name}
                </a>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  const header = document.getElementById('main-header');
  const navLinks = document.querySelectorAll('[data-nav-link]');
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const closeMobileMenu = document.getElementById('close-mobile-menu');
  const mobileMenu = document.getElementById('mobile-menu');
  const burgerIcon = mobileMenuToggle?.querySelector('svg');
  const logo = document.querySelector('.logo');

  const scrollThreshold = 50;

  function updateHeaderStyle() {
    if (!header) return;

    const currentScrollY = window.scrollY;

    if (currentScrollY > scrollThreshold) {
      header.classList.add('bg-white');
      header.classList.remove('bg-hr-dark', 'bg-opacity-30', 'backdrop-blur-md');
      
      navLinks.forEach(link => {
        if (link instanceof HTMLElement) {
          link.classList.remove('text-white');
          link.classList.add('text-hr-dark');
        }
      });
      if (logo instanceof HTMLImageElement) {
        logo.src = '/images/hr-surveyors-logo-light.png';
      }
      if (burgerIcon) {
        burgerIcon.classList.remove('text-white');
        burgerIcon.classList.add('text-hr-dark');
      }
    } else {
      header.classList.remove('bg-white');
      header.classList.add('bg-hr-dark', 'bg-opacity-30', 'backdrop-blur-md');
      
      navLinks.forEach(link => {
        if (link instanceof HTMLElement) {
          link.classList.add('text-white');
          link.classList.remove('text-hr-dark');
        }
      });
      if (logo instanceof HTMLImageElement) {
        logo.src = '/images/hr-surveyors-logo-dark.png';
      }
      if (burgerIcon) {
        burgerIcon.classList.add('text-white');
        burgerIcon.classList.remove('text-hr-dark');
      }
    }

  }

  // Call the function on initial load
  updateHeaderStyle();

  // Add event listener for scroll
  window.addEventListener('scroll', updateHeaderStyle);

  if (mobileMenuToggle && closeMobileMenu && mobileMenu) {
    mobileMenuToggle.addEventListener('click', () => {
      mobileMenu.classList.remove('translate-x-full');
      document.body.style.overflow = 'hidden';
    });

    closeMobileMenu.addEventListener('click', () => {
      mobileMenu.classList.add('translate-x-full');
      document.body.style.overflow = '';
    });
  }

  // Handle dropdowns in mobile menu
  const dropdownToggles = document.querySelectorAll('[data-dropdown-toggle]');
  dropdownToggles.forEach((toggle) => {
    toggle.addEventListener('click', () => {
      const dropdownName = toggle.getAttribute('data-dropdown-toggle');
      const dropdown = document.getElementById(`dropdown-${dropdownName}`);
      const arrow = toggle.querySelector('svg');
      
      if (dropdown && arrow) {
        dropdown.classList.toggle('hidden');
        arrow.classList.toggle('rotate-180');
      }
    });
  });
</script>