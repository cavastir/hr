---
import Icon from './Icon.astro';

export interface Props {
  services: Array<{
    title: string;
    icon: string;
    description: string;
  }>;
}

const { services } = Astro.props;
---

<div class="services-carousel-container">
  <div class="services-carousel" id="servicesCarousel">
    {services.map((service, index) => (
      <div class="service-card">
        <div class="bg-white rounded-lg shadow-md p-4 h-full border border-gray-100 hover:shadow-lg transition-shadow duration-300">
          <div class="text-center mb-3">
            <div class="mx-auto mb-3 flex items-center justify-center">
              <Icon name={service.icon} class="w-8 h-8 text-hr-dark" />
            </div>
            <h3 class="text-lg font-semibold text-hr-dark mb-2">{service.title}</h3>
          </div>
          <p class="text-gray-600 text-sm leading-relaxed text-center mb-4">
            {service.description.split('.')[0]}.
          </p>
          <div class="text-center">
            <span class="inline-flex items-center text-hr-accent text-sm font-medium hover:text-hr-primary transition-colors cursor-pointer">
              Learn more
              <svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </span>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Navigation Arrows -->
  <button 
    class="carousel-nav carousel-nav-prev" 
    id="prevBtn"
    aria-label="Previous services"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>
  
  <button 
    class="carousel-nav carousel-nav-next" 
    id="nextBtn"
    aria-label="Next services"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
  
  <!-- Pagination Dots -->
  <div class="carousel-pagination" id="carouselPagination">
    <!-- Dots will be generated by JavaScript -->
  </div>
</div>

<style>
  .services-carousel-container {
    position: relative;
    max-width: 100%;
    overflow: hidden;
  }

  .services-carousel {
    display: flex;
    gap: 2rem;
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding: 1rem 0;
  }

  .services-carousel::-webkit-scrollbar {
    display: none;
  }

  .service-card {
    flex: 0 0 auto;
    width: 240px;
    min-width: 240px;
  }

  @media (min-width: 640px) {
    .service-card {
      width: 280px;
      min-width: 280px;
    }
  }

  @media (min-width: 1024px) {
    .service-card {
      width: 300px;
      min-width: 300px;
    }
  }

  .carousel-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #374151;
    transition: all 0.3s ease;
    z-index: 10;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .carousel-nav:hover {
    background: #f9fafb;
    border-color: #d1d5db;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .carousel-nav:active {
    transform: translateY(-50%) scale(0.95);
  }

  .carousel-nav-prev {
    left: -20px;
  }

  .carousel-nav-next {
    right: -20px;
  }

  .carousel-pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .pagination-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #d1d5db;
    transition: background-color 0.3s ease;
    cursor: pointer;
  }

  .pagination-dot.active {
    background: #047857;
  }

  @media (max-width: 640px) {
    .carousel-nav {
      display: none;
    }
    
    .service-card {
      width: 220px;
      min-width: 220px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('servicesCarousel') as HTMLElement;
    const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
    const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
    const pagination = document.getElementById('carouselPagination') as HTMLElement;
    
    if (!carousel || !prevBtn || !nextBtn || !pagination) return;
    
    const cards = carousel.querySelectorAll('.service-card');
    const firstCard = cards[0] as HTMLElement;
    const cardWidth = firstCard?.offsetWidth + 32; // card width + gap
    const visibleCards = Math.floor(carousel.offsetWidth / cardWidth);
    const totalPages = Math.ceil(cards.length / visibleCards);
    let currentPage = 0;
    
    // Create pagination dots
    for (let i = 0; i < totalPages; i++) {
      const dot = document.createElement('button');
      dot.className = `pagination-dot ${i === 0 ? 'active' : ''}`;
      dot.setAttribute('aria-label', `Go to page ${i + 1}`);
      dot.addEventListener('click', () => goToPage(i));
      pagination.appendChild(dot);
    }
    
    function updatePagination() {
      const dots = pagination.querySelectorAll('.pagination-dot');
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentPage);
      });
    }
    
    function goToPage(page: number) {
      currentPage = Math.max(0, Math.min(page, totalPages - 1));
      const scrollLeft = currentPage * cardWidth * visibleCards;
      carousel.scrollTo({
        left: scrollLeft,
        behavior: 'smooth'
      });
      updatePagination();
    }
    
    prevBtn.addEventListener('click', () => {
      goToPage(currentPage - 1);
    });
    
    nextBtn.addEventListener('click', () => {
      goToPage(currentPage + 1);
    });
    
    // Handle scroll events for pagination sync
    let scrollTimeout: ReturnType<typeof setTimeout>;
    carousel.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        const scrollLeft = carousel.scrollLeft;
        const newPage = Math.round(scrollLeft / (cardWidth * visibleCards));
        if (newPage !== currentPage) {
          currentPage = newPage;
          updatePagination();
        }
      }, 100);
    });
    
    // Auto-hide navigation on mobile swipe
    let startX = 0;
    carousel.addEventListener('touchstart', (e: TouchEvent) => {
      startX = e.touches[0].clientX;
    });
    
    carousel.addEventListener('touchend', (e: TouchEvent) => {
      const endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          goToPage(currentPage + 1);
        } else {
          goToPage(currentPage - 1);
        }
      }
    });
  });
</script> 